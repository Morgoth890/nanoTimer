package com.cube.nanotimer.scrambler.randomstate;

enum Move {

  // Cubies numbering:
  //
  //       U              D        E (mid-layer)
  // #############  #############  #############
  // # 1 # 7 # 4 #  # 6 # 9 # 7 #  # 3 #   # 2 #
  // #############  #############  #############
  // # 8 #   # 6 #  # 12#   # 10#  #   #   #   #
  // #############  #############  #############
  // # 2 # 5 # 3 #  # 5 # 11# 8 #  # 4 #   # 1 #
  // #############  #############  #############

  U ("U",  new byte[] { 2, 3, 4, 1, 5, 6, 7, 8 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 2, 3, 4, 6, 7, 8, 5, 9, 10, 11, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  U2("U2", new byte[] { 3, 4, 1, 2, 5, 6, 7, 8 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 2, 3, 4, 7, 8, 5, 6, 9, 10, 11, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  UP("U'", new byte[] { 4, 1, 2, 3, 5, 6, 7, 8 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 2, 3, 4, 8, 5, 6, 7, 9, 10, 11, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  D ("D",  new byte[] { 1, 2, 3, 4, 8, 5, 6, 7 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  D2("D2", new byte[] { 1, 2, 3, 4, 7, 8, 5, 6 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  DP("D'", new byte[] { 1, 2, 3, 4, 6, 7, 8, 5 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 9 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  R ("R",  new byte[] { 1, 2, 7, 3, 5, 6, 8, 4 }, new byte[] { 0, 0, 2, 1, 0, 0, 1, 2 }, new byte[] { 10, 6, 3, 4, 5, 1, 7, 8, 9, 2, 11, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  R2("R2", new byte[] { 1, 2, 8, 7, 5, 6, 4, 3 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 2, 1, 3, 4, 5, 10, 7, 8, 9, 6, 11, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  RP("R'", new byte[] { 1, 2, 4, 8, 5, 6, 3, 7 }, new byte[] { 0, 0, 2, 1, 0, 0, 1, 2 }, new byte[] { 6, 10, 3, 4, 5, 2, 7, 8, 9, 1, 11, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  L ("L",  new byte[] { 5, 1, 3, 4, 6, 2, 7, 8 }, new byte[] { 2, 1, 0, 0, 1, 2, 0, 0 }, new byte[] { 1, 2, 12, 8, 5, 6, 7, 3, 9, 10, 11, 4 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  L2("L2", new byte[] { 6, 5, 3, 4, 2, 1, 7, 8 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 2, 4, 3, 5, 6, 7, 12, 9, 10, 11, 8 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  LP("L'", new byte[] { 2, 6, 3, 4, 1, 5, 7, 8 }, new byte[] { 2, 1, 0, 0, 1, 2, 0, 0 }, new byte[] { 1, 2, 8, 12, 5, 6, 7, 4, 9, 10, 11, 3 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  F ("F",  new byte[] { 1, 6, 2, 4, 5, 7, 3, 8 }, new byte[] { 0, 2, 1, 0, 0, 1, 2, 0 }, new byte[] { 5, 2, 3, 9, 4, 6, 7, 8, 1, 10, 11, 12 }, new byte[] { 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0 }),
  F2("F2", new byte[] { 1, 7, 6, 4, 5, 3, 2, 8 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 4, 2, 3, 1, 9, 6, 7, 8, 5, 10, 11, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  FP("F'", new byte[] { 1, 3, 7, 4, 5, 2, 6, 8 }, new byte[] { 0, 2, 1, 0, 0, 1, 2, 0 }, new byte[] { 9, 2, 3, 5, 1, 6, 7, 8, 4, 10, 11, 12 }, new byte[] { 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0 }),
  B ("B",  new byte[] { 4, 2, 3, 8, 1, 6, 7, 5 }, new byte[] { 1, 0, 0, 2, 2, 0, 0, 1 }, new byte[] { 1, 11, 7, 4, 5, 6, 2, 8, 9, 10, 3, 12 }, new byte[] { 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0 }),
  B2("B2", new byte[] { 8, 2, 3, 5, 4, 6, 7, 1 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }, new byte[] { 1, 3, 2, 4, 5, 6, 11, 8, 9, 10, 7, 12 }, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),
  BP("B'", new byte[] { 5, 2, 3, 1, 8, 6, 7, 4 }, new byte[] { 1, 0, 0, 2, 2, 0, 0, 1 }, new byte[] { 1, 7, 11, 4, 5, 6, 3, 8, 9, 10, 2, 12 }, new byte[] { 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0 });

  Move(String name, byte[] corPerm, byte[] corOrient, byte[] edgPerm, byte[] edgOrient) {
    this.name = name;
    this.corPerm = corPerm;
    this.corOrient = corOrient;
    this.edgPerm = edgPerm;
    this.edgOrient = edgOrient;
  }

  String name;
  byte[] corPerm;
  byte[] corOrient;
  byte[] edgPerm;
  byte[] edgOrient;
}
